let mongoose;_673‍.x([["default",()=>_673‍.o]]);_673‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);
const { Schema } = mongoose;

const productSchema = new Schema(
  {
    sku: { type: String, required: true },
    name: { type: String, required: true },
    description: { type: String, required: true },
    price: { type: String, required: true },
    currency: { type: String, required: true },
    creatorId: { type: String, required: true },
    categories: [{ type: String, required: false }],
    image: [{ type: String, required: false }],
    likes: { type: Number, required: false, default: 0 }
  },
  {
    timestamps: true
  }
);

productSchema.statics.getProducts = getProducts;
productSchema.statics.createProduct = createProduct;
productSchema.statics.getProductById = getProductById;
productSchema.statics.updateProduct = updateProduct;

async function getProducts({ids, category}) {
  let dataRes;

  if(!ids&&!category){
      return this.find()
  }
  if(!ids&&category){
      return this.find({ categories: { $in: category } })
  }
  await this.find(
    { _id: { $in: ids.split(",") } },
    (err, data) =>
      (dataRes = data.filter(e => { 
        if (!category) {
          return data;
        }
        return e.categories.includes(category);
      }))
  );

  return dataRes;
}

async function getProductById(productId) {
  // return this.findOne({ _id: questionId });
  return this.findById(productId);
}

async function createProduct(body) {
  return this.create(body);
}

async function updateProduct(id, update) {
  return this.findByIdAndUpdate(id, update, { new: true });
}

const productsModel = mongoose.model("Product", productSchema);
_673‍.d(productsModel);
